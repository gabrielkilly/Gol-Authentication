// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"gol/authentication/main/do"
	"gol/authentication/main/exception"
	"gol/authentication/main/service/user"
	"sync"
)

// Ensure, that IUserServiceMock does implement user.IUserService.
// If this is not the case, regenerate this file with moq.
var _ user.IUserService = &IUserServiceMock{}

// IUserServiceMock is a mock implementation of user.IUserService.
//
// 	func TestSomethingThatUsesIUserService(t *testing.T) {
//
// 		// make and configure a mocked user.IUserService
// 		mockedIUserService := &IUserServiceMock{
// 			CreateUserFunc: func(request do.CreateAuthUserRequest) (*do.CreateAuthUserResponse, exception.IHttpException) {
// 				panic("mock out the CreateUser method")
// 			},
// 		}
//
// 		// use mockedIUserService in code that requires user.IUserService
// 		// and then make assertions.
//
// 	}
type IUserServiceMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(request do.CreateAuthUserRequest) (*do.CreateAuthUserResponse, exception.IHttpException)

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Request is the request argument value.
			Request do.CreateAuthUserRequest
		}
	}
	lockCreateUser sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *IUserServiceMock) CreateUser(request do.CreateAuthUserRequest) (*do.CreateAuthUserResponse, exception.IHttpException) {
	if mock.CreateUserFunc == nil {
		panic("IUserServiceMock.CreateUserFunc: method is nil but IUserService.CreateUser was just called")
	}
	callInfo := struct {
		Request do.CreateAuthUserRequest
	}{
		Request: request,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(request)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedIUserService.CreateUserCalls())
func (mock *IUserServiceMock) CreateUserCalls() []struct {
	Request do.CreateAuthUserRequest
} {
	var calls []struct {
		Request do.CreateAuthUserRequest
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}
